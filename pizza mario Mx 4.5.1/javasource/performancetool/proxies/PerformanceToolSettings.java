// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package performancetool.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class PerformanceToolSettings
{
	private final IMendixObject performanceToolSettingsMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "PerformanceTool.PerformanceToolSettings";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Marker("Marker"),
		StartedMeasurement("StartedMeasurement"),
		PreProcess("PreProcess"),
		TraceSQL("TraceSQL"),
		MicroflowThreshold("MicroflowThreshold"),
		IncludeMicroflows("IncludeMicroflows"),
		ExcludeMicroflows("ExcludeMicroflows");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public PerformanceToolSettings(IContext context)
	{
		this(context, Core.instantiate(context, "PerformanceTool.PerformanceToolSettings"));
	}

	protected PerformanceToolSettings(IContext context, IMendixObject performanceToolSettingsMendixObject)
	{
		if (performanceToolSettingsMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("PerformanceTool.PerformanceToolSettings", performanceToolSettingsMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a PerformanceTool.PerformanceToolSettings");

		this.performanceToolSettingsMendixObject = performanceToolSettingsMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new PerformanceToolSettings(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static performancetool.proxies.PerformanceToolSettings create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "PerformanceTool.PerformanceToolSettings");
		return new performancetool.proxies.PerformanceToolSettings(context, mendixObject);
	}

	/**
	 * @deprecated Use 'PerformanceToolSettings.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static performancetool.proxies.PerformanceToolSettings initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return performancetool.proxies.PerformanceToolSettings.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static performancetool.proxies.PerformanceToolSettings initialize(IContext context, IMendixObject mendixObject)
	{
		return new performancetool.proxies.PerformanceToolSettings(context, mendixObject);
	}

	public static performancetool.proxies.PerformanceToolSettings load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return performancetool.proxies.PerformanceToolSettings.initialize(context, mendixObject);
	}

	public static java.util.List<performancetool.proxies.PerformanceToolSettings> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<performancetool.proxies.PerformanceToolSettings> result = new java.util.ArrayList<performancetool.proxies.PerformanceToolSettings>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//PerformanceTool.PerformanceToolSettings" + xpathConstraint))
			result.add(performancetool.proxies.PerformanceToolSettings.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Marker
	 */
	public final String getMarker()
	{
		return getMarker(getContext());
	}

	/**
	 * @param context
	 * @return value of Marker
	 */
	public final String getMarker(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Marker.toString());
	}

	/**
	 * Set value of Marker
	 * @param marker
	 */
	public final void setMarker(String marker)
	{
		setMarker(getContext(), marker);
	}

	/**
	 * Set value of Marker
	 * @param context
	 * @param marker
	 */
	public final void setMarker(IContext context, String marker)
	{
		getMendixObject().setValue(context, MemberNames.Marker.toString(), marker);
	}

	/**
	 * @return value of StartedMeasurement
	 */
	public final Boolean getStartedMeasurement()
	{
		return getStartedMeasurement(getContext());
	}

	/**
	 * @param context
	 * @return value of StartedMeasurement
	 */
	public final Boolean getStartedMeasurement(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.StartedMeasurement.toString());
	}

	/**
	 * Set value of StartedMeasurement
	 * @param startedmeasurement
	 */
	public final void setStartedMeasurement(Boolean startedmeasurement)
	{
		setStartedMeasurement(getContext(), startedmeasurement);
	}

	/**
	 * Set value of StartedMeasurement
	 * @param context
	 * @param startedmeasurement
	 */
	public final void setStartedMeasurement(IContext context, Boolean startedmeasurement)
	{
		getMendixObject().setValue(context, MemberNames.StartedMeasurement.toString(), startedmeasurement);
	}

	/**
	 * @return value of PreProcess
	 */
	public final Boolean getPreProcess()
	{
		return getPreProcess(getContext());
	}

	/**
	 * @param context
	 * @return value of PreProcess
	 */
	public final Boolean getPreProcess(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.PreProcess.toString());
	}

	/**
	 * Set value of PreProcess
	 * @param preprocess
	 */
	public final void setPreProcess(Boolean preprocess)
	{
		setPreProcess(getContext(), preprocess);
	}

	/**
	 * Set value of PreProcess
	 * @param context
	 * @param preprocess
	 */
	public final void setPreProcess(IContext context, Boolean preprocess)
	{
		getMendixObject().setValue(context, MemberNames.PreProcess.toString(), preprocess);
	}

	/**
	 * @return value of TraceSQL
	 */
	public final Boolean getTraceSQL()
	{
		return getTraceSQL(getContext());
	}

	/**
	 * @param context
	 * @return value of TraceSQL
	 */
	public final Boolean getTraceSQL(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.TraceSQL.toString());
	}

	/**
	 * Set value of TraceSQL
	 * @param tracesql
	 */
	public final void setTraceSQL(Boolean tracesql)
	{
		setTraceSQL(getContext(), tracesql);
	}

	/**
	 * Set value of TraceSQL
	 * @param context
	 * @param tracesql
	 */
	public final void setTraceSQL(IContext context, Boolean tracesql)
	{
		getMendixObject().setValue(context, MemberNames.TraceSQL.toString(), tracesql);
	}

	/**
	 * @return value of MicroflowThreshold
	 */
	public final Long getMicroflowThreshold()
	{
		return getMicroflowThreshold(getContext());
	}

	/**
	 * @param context
	 * @return value of MicroflowThreshold
	 */
	public final Long getMicroflowThreshold(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.MicroflowThreshold.toString());
	}

	/**
	 * Set value of MicroflowThreshold
	 * @param microflowthreshold
	 */
	public final void setMicroflowThreshold(Long microflowthreshold)
	{
		setMicroflowThreshold(getContext(), microflowthreshold);
	}

	/**
	 * Set value of MicroflowThreshold
	 * @param context
	 * @param microflowthreshold
	 */
	public final void setMicroflowThreshold(IContext context, Long microflowthreshold)
	{
		getMendixObject().setValue(context, MemberNames.MicroflowThreshold.toString(), microflowthreshold);
	}

	/**
	 * @return value of IncludeMicroflows
	 */
	public final String getIncludeMicroflows()
	{
		return getIncludeMicroflows(getContext());
	}

	/**
	 * @param context
	 * @return value of IncludeMicroflows
	 */
	public final String getIncludeMicroflows(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.IncludeMicroflows.toString());
	}

	/**
	 * Set value of IncludeMicroflows
	 * @param includemicroflows
	 */
	public final void setIncludeMicroflows(String includemicroflows)
	{
		setIncludeMicroflows(getContext(), includemicroflows);
	}

	/**
	 * Set value of IncludeMicroflows
	 * @param context
	 * @param includemicroflows
	 */
	public final void setIncludeMicroflows(IContext context, String includemicroflows)
	{
		getMendixObject().setValue(context, MemberNames.IncludeMicroflows.toString(), includemicroflows);
	}

	/**
	 * @return value of ExcludeMicroflows
	 */
	public final String getExcludeMicroflows()
	{
		return getExcludeMicroflows(getContext());
	}

	/**
	 * @param context
	 * @return value of ExcludeMicroflows
	 */
	public final String getExcludeMicroflows(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.ExcludeMicroflows.toString());
	}

	/**
	 * Set value of ExcludeMicroflows
	 * @param excludemicroflows
	 */
	public final void setExcludeMicroflows(String excludemicroflows)
	{
		setExcludeMicroflows(getContext(), excludemicroflows);
	}

	/**
	 * Set value of ExcludeMicroflows
	 * @param context
	 * @param excludemicroflows
	 */
	public final void setExcludeMicroflows(IContext context, String excludemicroflows)
	{
		getMendixObject().setValue(context, MemberNames.ExcludeMicroflows.toString(), excludemicroflows);
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return performanceToolSettingsMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final performancetool.proxies.PerformanceToolSettings that = (performancetool.proxies.PerformanceToolSettings) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "PerformanceTool.PerformanceToolSettings";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().getGuid();
	}
}

// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Code you write here will be lost the next time you deploy the project.

package performancetool.proxies;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;

/**
 * 
 */
public class ActionPerformance
{
	private final IMendixObject actionPerformanceMendixObject;

	private final IContext context;

	/**
	 * Internal name of this entity
	 */
	public static final String entityName = "PerformanceTool.ActionPerformance";

	/**
	 * Enum describing members of this entity
	 */
	public enum MemberNames
	{
		Name("Name"),
		Duration("Duration"),
		Timestamp("Timestamp"),
		ActionType("ActionType"),
		IsMicroflowCall("IsMicroflowCall"),
		IsLoopCall("IsLoopCall"),
		AutoID("AutoID"),
		CallingMicroflowID("CallingMicroflowID"),
		EndTime("EndTime"),
		Message("Message"),
		ActionPerformance_MicroflowPerformance("PerformanceTool.ActionPerformance_MicroflowPerformance");

		private String metaName;

		MemberNames(String s)
		{
			metaName = s;
		}

		@Override
		public String toString()
		{
			return metaName;
		}
	}

	public ActionPerformance(IContext context)
	{
		this(context, Core.instantiate(context, "PerformanceTool.ActionPerformance"));
	}

	protected ActionPerformance(IContext context, IMendixObject actionPerformanceMendixObject)
	{
		if (actionPerformanceMendixObject == null)
			throw new IllegalArgumentException("The given object cannot be null.");
		if (!Core.isSubClassOf("PerformanceTool.ActionPerformance", actionPerformanceMendixObject.getType()))
			throw new IllegalArgumentException("The given object is not a PerformanceTool.ActionPerformance");

		this.actionPerformanceMendixObject = actionPerformanceMendixObject;
		this.context = context;
	}

	/**
	 * @deprecated Use 'new ActionPerformance(Context)' instead. Note that the constructor will not insert the new object in the database.
	 */
	@Deprecated
	public static performancetool.proxies.ActionPerformance create(IContext context) throws CoreException
	{
		IMendixObject mendixObject = Core.create(context, "PerformanceTool.ActionPerformance");
		return new performancetool.proxies.ActionPerformance(context, mendixObject);
	}

	/**
	 * @deprecated Use 'ActionPerformance.load(IContext, IMendixIdentifier)' instead.
	 */
	@Deprecated
	public static performancetool.proxies.ActionPerformance initialize(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		return performancetool.proxies.ActionPerformance.load(context, mendixIdentifier);
	}

	/**
	 * Initialize a proxy using context (recommended). This context will be used for security checking when the get- and set-methods without context parameters are called.
	 * The get- and set-methods with context parameter should be used when for instance sudo access is necessary (IContext.getSudoContext() can be used to obtain sudo access).
	 */
	public static performancetool.proxies.ActionPerformance initialize(IContext context, IMendixObject mendixObject)
	{
		return new performancetool.proxies.ActionPerformance(context, mendixObject);
	}

	public static performancetool.proxies.ActionPerformance load(IContext context, IMendixIdentifier mendixIdentifier) throws CoreException
	{
		IMendixObject mendixObject = Core.retrieveId(context, mendixIdentifier);
		return performancetool.proxies.ActionPerformance.initialize(context, mendixObject);
	}

	public static java.util.List<performancetool.proxies.ActionPerformance> load(IContext context, String xpathConstraint) throws CoreException
	{
		java.util.List<performancetool.proxies.ActionPerformance> result = new java.util.ArrayList<performancetool.proxies.ActionPerformance>();
		for (IMendixObject obj : Core.retrieveXPathQuery(context, "//PerformanceTool.ActionPerformance" + xpathConstraint))
			result.add(performancetool.proxies.ActionPerformance.initialize(context, obj));
		return result;
	}

	/**
	 * Commit the changes made on this proxy object.
	 */
	public final void commit() throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Commit the changes made on this proxy object using the specified context.
	 */
	public final void commit(IContext context) throws CoreException
	{
		Core.commit(context, getMendixObject());
	}

	/**
	 * Delete the object.
	 */
	public final void delete()
	{
		Core.delete(context, getMendixObject());
	}

	/**
	 * Delete the object using the specified context.
	 */
	public final void delete(IContext context)
	{
		Core.delete(context, getMendixObject());
	}
	/**
	 * @return value of Name
	 */
	public final String getName()
	{
		return getName(getContext());
	}

	/**
	 * @param context
	 * @return value of Name
	 */
	public final String getName(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Name.toString());
	}

	/**
	 * Set value of Name
	 * @param name
	 */
	public final void setName(String name)
	{
		setName(getContext(), name);
	}

	/**
	 * Set value of Name
	 * @param context
	 * @param name
	 */
	public final void setName(IContext context, String name)
	{
		getMendixObject().setValue(context, MemberNames.Name.toString(), name);
	}

	/**
	 * @return value of Duration
	 */
	public final Long getDuration()
	{
		return getDuration(getContext());
	}

	/**
	 * @param context
	 * @return value of Duration
	 */
	public final Long getDuration(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.Duration.toString());
	}

	/**
	 * Set value of Duration
	 * @param duration
	 */
	public final void setDuration(Long duration)
	{
		setDuration(getContext(), duration);
	}

	/**
	 * Set value of Duration
	 * @param context
	 * @param duration
	 */
	public final void setDuration(IContext context, Long duration)
	{
		getMendixObject().setValue(context, MemberNames.Duration.toString(), duration);
	}

	/**
	 * @return value of Timestamp
	 */
	public final java.util.Date getTimestamp()
	{
		return getTimestamp(getContext());
	}

	/**
	 * @param context
	 * @return value of Timestamp
	 */
	public final java.util.Date getTimestamp(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.Timestamp.toString());
	}

	/**
	 * Set value of Timestamp
	 * @param timestamp
	 */
	public final void setTimestamp(java.util.Date timestamp)
	{
		setTimestamp(getContext(), timestamp);
	}

	/**
	 * Set value of Timestamp
	 * @param context
	 * @param timestamp
	 */
	public final void setTimestamp(IContext context, java.util.Date timestamp)
	{
		getMendixObject().setValue(context, MemberNames.Timestamp.toString(), timestamp);
	}

	/**
	 * @return value of ActionType
	 */
	public final String getActionType()
	{
		return getActionType(getContext());
	}

	/**
	 * @param context
	 * @return value of ActionType
	 */
	public final String getActionType(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.ActionType.toString());
	}

	/**
	 * Set value of ActionType
	 * @param actiontype
	 */
	public final void setActionType(String actiontype)
	{
		setActionType(getContext(), actiontype);
	}

	/**
	 * Set value of ActionType
	 * @param context
	 * @param actiontype
	 */
	public final void setActionType(IContext context, String actiontype)
	{
		getMendixObject().setValue(context, MemberNames.ActionType.toString(), actiontype);
	}

	/**
	 * @return value of IsMicroflowCall
	 */
	public final Boolean getIsMicroflowCall()
	{
		return getIsMicroflowCall(getContext());
	}

	/**
	 * @param context
	 * @return value of IsMicroflowCall
	 */
	public final Boolean getIsMicroflowCall(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.IsMicroflowCall.toString());
	}

	/**
	 * Set value of IsMicroflowCall
	 * @param ismicroflowcall
	 */
	public final void setIsMicroflowCall(Boolean ismicroflowcall)
	{
		setIsMicroflowCall(getContext(), ismicroflowcall);
	}

	/**
	 * Set value of IsMicroflowCall
	 * @param context
	 * @param ismicroflowcall
	 */
	public final void setIsMicroflowCall(IContext context, Boolean ismicroflowcall)
	{
		getMendixObject().setValue(context, MemberNames.IsMicroflowCall.toString(), ismicroflowcall);
	}

	/**
	 * @return value of IsLoopCall
	 */
	public final Boolean getIsLoopCall()
	{
		return getIsLoopCall(getContext());
	}

	/**
	 * @param context
	 * @return value of IsLoopCall
	 */
	public final Boolean getIsLoopCall(IContext context)
	{
		return (Boolean) getMendixObject().getValue(context, MemberNames.IsLoopCall.toString());
	}

	/**
	 * Set value of IsLoopCall
	 * @param isloopcall
	 */
	public final void setIsLoopCall(Boolean isloopcall)
	{
		setIsLoopCall(getContext(), isloopcall);
	}

	/**
	 * Set value of IsLoopCall
	 * @param context
	 * @param isloopcall
	 */
	public final void setIsLoopCall(IContext context, Boolean isloopcall)
	{
		getMendixObject().setValue(context, MemberNames.IsLoopCall.toString(), isloopcall);
	}

	/**
	 * @return value of AutoID
	 */
	public final Long getAutoID()
	{
		return getAutoID(getContext());
	}

	/**
	 * @param context
	 * @return value of AutoID
	 */
	public final Long getAutoID(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.AutoID.toString());
	}

	/**
	 * Set value of AutoID
	 * @param autoid
	 */
	public final void setAutoID(Long autoid)
	{
		setAutoID(getContext(), autoid);
	}

	/**
	 * Set value of AutoID
	 * @param context
	 * @param autoid
	 */
	public final void setAutoID(IContext context, Long autoid)
	{
		getMendixObject().setValue(context, MemberNames.AutoID.toString(), autoid);
	}

	/**
	 * @return value of CallingMicroflowID
	 */
	public final Long getCallingMicroflowID()
	{
		return getCallingMicroflowID(getContext());
	}

	/**
	 * @param context
	 * @return value of CallingMicroflowID
	 */
	public final Long getCallingMicroflowID(IContext context)
	{
		return (Long) getMendixObject().getValue(context, MemberNames.CallingMicroflowID.toString());
	}

	/**
	 * Set value of CallingMicroflowID
	 * @param callingmicroflowid
	 */
	public final void setCallingMicroflowID(Long callingmicroflowid)
	{
		setCallingMicroflowID(getContext(), callingmicroflowid);
	}

	/**
	 * Set value of CallingMicroflowID
	 * @param context
	 * @param callingmicroflowid
	 */
	public final void setCallingMicroflowID(IContext context, Long callingmicroflowid)
	{
		getMendixObject().setValue(context, MemberNames.CallingMicroflowID.toString(), callingmicroflowid);
	}

	/**
	 * @return value of EndTime
	 */
	public final java.util.Date getEndTime()
	{
		return getEndTime(getContext());
	}

	/**
	 * @param context
	 * @return value of EndTime
	 */
	public final java.util.Date getEndTime(IContext context)
	{
		return (java.util.Date) getMendixObject().getValue(context, MemberNames.EndTime.toString());
	}

	/**
	 * Set value of EndTime
	 * @param endtime
	 */
	public final void setEndTime(java.util.Date endtime)
	{
		setEndTime(getContext(), endtime);
	}

	/**
	 * Set value of EndTime
	 * @param context
	 * @param endtime
	 */
	public final void setEndTime(IContext context, java.util.Date endtime)
	{
		getMendixObject().setValue(context, MemberNames.EndTime.toString(), endtime);
	}

	/**
	 * @return value of Message
	 */
	public final String getMessage()
	{
		return getMessage(getContext());
	}

	/**
	 * @param context
	 * @return value of Message
	 */
	public final String getMessage(IContext context)
	{
		return (String) getMendixObject().getValue(context, MemberNames.Message.toString());
	}

	/**
	 * Set value of Message
	 * @param message
	 */
	public final void setMessage(String message)
	{
		setMessage(getContext(), message);
	}

	/**
	 * Set value of Message
	 * @param context
	 * @param message
	 */
	public final void setMessage(IContext context, String message)
	{
		getMendixObject().setValue(context, MemberNames.Message.toString(), message);
	}

	/**
	 * @return value of ActionPerformance_MicroflowPerformance
	 */
	public final performancetool.proxies.MicroflowPerformance getActionPerformance_MicroflowPerformance() throws CoreException
	{
		return getActionPerformance_MicroflowPerformance(getContext());
	}

	/**
	 * @param context
	 * @return value of ActionPerformance_MicroflowPerformance
	 */
	public final performancetool.proxies.MicroflowPerformance getActionPerformance_MicroflowPerformance(IContext context) throws CoreException
	{
		performancetool.proxies.MicroflowPerformance result = null;
		IMendixIdentifier identifier = getMendixObject().getValue(context, MemberNames.ActionPerformance_MicroflowPerformance.toString());
		if (identifier != null)
			result = performancetool.proxies.MicroflowPerformance.load(context, identifier);
		return result;
	}

	/**
	 * Set value of ActionPerformance_MicroflowPerformance
	 * @param actionperformance_microflowperformance
	 */
	public final void setActionPerformance_MicroflowPerformance(performancetool.proxies.MicroflowPerformance actionperformance_microflowperformance)
	{
		setActionPerformance_MicroflowPerformance(getContext(), actionperformance_microflowperformance);
	}

	/**
	 * Set value of ActionPerformance_MicroflowPerformance
	 * @param context
	 * @param actionperformance_microflowperformance
	 */
	public final void setActionPerformance_MicroflowPerformance(IContext context, performancetool.proxies.MicroflowPerformance actionperformance_microflowperformance)
	{
		if (actionperformance_microflowperformance == null)
			getMendixObject().setValue(context, MemberNames.ActionPerformance_MicroflowPerformance.toString(), null);
		else
			getMendixObject().setValue(context, MemberNames.ActionPerformance_MicroflowPerformance.toString(), actionperformance_microflowperformance.getMendixObject().getId());
	}

	/**
	 * @return the IMendixObject instance of this proxy for use in the Core interface.
	 */
	public final IMendixObject getMendixObject()
	{
		return actionPerformanceMendixObject;
	}

	/**
	 * @return the IContext instance of this proxy, or null if no IContext instance was specified at initialization.
	 */
	public final IContext getContext()
	{
		return context;
	}

	@Override
	public boolean equals(Object obj)
	{
		if (obj == this)
			return true;

		if (obj != null && getClass().equals(obj.getClass()))
		{
			final performancetool.proxies.ActionPerformance that = (performancetool.proxies.ActionPerformance) obj;
			return getMendixObject().equals(that.getMendixObject());
		}
		return false;
	}

	@Override
	public int hashCode()
	{
		return getMendixObject().hashCode();
	}

	/**
	 * @return String name of this class
	 */
	public static String getType()
	{
		return "PerformanceTool.ActionPerformance";
	}

	/**
	 * @return String GUID from this object, format: ID_0000000000
	 * @deprecated Use getMendixObject().getId().toLong() to get a unique identifier for this object.
	 */
	@Deprecated
	public String getGUID()
	{
		return "ID_" + getMendixObject().getId().getGuid();
	}
}

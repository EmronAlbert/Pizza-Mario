// This file was generated by Mendix Business Modeler 4.0.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package performancetool.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.UserAction;
import nl.mansystems.performancetool.PerformanceToolLogSubscriber;
import com.mendix.core.Core;
import com.mendix.m2ee.log.LogLevel;
import com.mendix.m2ee.log.LogSubscriber;

/**
 * Initializes the log subscriber that writes log messages to the database as "Logging.Message" objects.
 * 
 * Parameters:
 *  - logLevel: The minimum log level of log messages to store in the database. Must be one of: NONE, CRITICAL, ERROR, WARNING, INFO, DEBUG, TRACE. Use "NONE" to disable logging to objects. If no log level is provided (null or empty string), level "INFO" is used by default.
 * 
 * Returns: 'true' on success, 'false' on failure.
 */
public class InitializeLogSubscriber extends UserAction<Boolean>
{
	private String logLevel;

	public InitializeLogSubscriber(String logLevel)
	{
		super();
		this.logLevel = logLevel;
	}

	@Override
	public Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
	     try {
	            if ((this.logLevel != null) && !this.logLevel.isEmpty()) {
	            	PerformanceToolLogSubscriber.setLogLevel(LogLevel.valueOf(logLevel.toUpperCase()));
	            } else {
	            	PerformanceToolLogSubscriber.setLogLevel(LogLevel.TRACE);
	            }
	            try {
	            	Thread.sleep(2000);
	            } catch(InterruptedException e) {} 
	            Core.registerLogSubscriber(PerformanceToolLogSubscriber.getInstance());
	            try {
	            	Thread.sleep(3000);
	            } catch(InterruptedException e) {} 
	            Core.getLogger("Logging").trace("MendixObjectLogSubscriber registered.");
	            PerformanceToolLogSubscriber.getInstance().setOutputLevels(LogLevel.INFO); // INFO is the default
	            Core.getLogger("Logging").trace("MendixObjectLogSubscriber output levels set.");
	            
	        }
	        catch (final Throwable ex) {
	            Core.getLogger("Logging").error("Exception while trying to subscribe to the Mendix log manager.", ex);
	            return Boolean.FALSE;
	        }
	        return Boolean.TRUE;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public String toString()
	{
		return "InitializeLogSubscriber";
	}

	// BEGIN EXTRA CODE
	

	// END EXTRA CODE
}
